Main & LED PCB testing
======================

Design goals:
 - minimal required interaction
 - minimal testing time
 - minimal necessaary external instrumentation

Brain requirements:
 - battery soldered
 - LED board connected
 - raspberry pi not connected
 - power switch initially set to OFF position

Test jig general features:
 - [TP103] TEST_ACTIVE input that, when 3.3V is present, connects specified test points together
 - [ TP98] TEST_CHARGER_EN input that, when 3.3V is present, connects 5V 1A capable power supply to TP91 (5V_RPI_SW)
 - 4 x 3.3V voltage detectors (sensor port output supplies), with <placeholder 100mV> tolerrance
 - 10x 5V voltage detectors (sensor + motor port output supplies) with <placeholder 100mV> tolerance
 - 10V 1.5A capable power supply connected to TP83 (supply for motor tests)


Raspberry interface GPIO allocation:
 0: TP103: TEST_ACTIVE
 1: TP98:  TEST_CHARGER_EN
 2: TP99:  I2C_SDA_sense
 3: TP100: I2C_SCL_sense
 4: TP101: AMP_EN_sense
 5: TP105: TP104 (Audio PWM)
 6: TP106: Motor Encoder drive channel 1 & 2


Testing power switch
--------------------

 # Test actions required:
  # set switch to ON position
  # observe that LEDs on the LED board are lit


Testing battery charging
------------------------

 # Preparations required:
  # 5V power supply connected to TP91 that can be enabled or disabled by a 3.3V signal on TP98

 # Test procedure in firmware:
  # apply control signal on TP98
  # assert that either STAT or STBY is pulled down
  # remove control signal
  # assert that status lines are pulled up


Testing RPi communication
-------------------------

 # Preparations required:
  # Connect TP92 to TP99 (direct connection, not switchable)
  # Connect TP93 to TP100 (direct connection, not switchable)
  # Connect TP97 (AMP_EN) to TP101 (direct connection, not switchable)
  # Connect TP105 to TP104

 # Test procedure in firmware:
  # read AMP_EN, verify it is pulled high
  # read TP92 and TP99, verify it is pulled high and the test points are connected
  # read TP93 and TP100, verify it is pulled high and the test points are connected
  # drive TP92 low, read TP99 and verify it reads low
  # drive TP93 low, read TP100 and verify it reads low


Testing sensor ports
--------------------

 # Preparation required:
  # connect the following test points together, using direct connections (not switchable): (i2c to gpio to check pullups independently)
   # Sensor port 3:
    # TP108 (IN0) - TP110 (SDA)
	# TP111 (SCL) - TP113 (IN1) - TP112 (AIN)
   # Sensor port 2:
    # TP117 (IN0) - TP119 (SDA)
	# TP120 (SCL) - TP122 (IN1) - TP121 (AIN)
   # Sensor port 1:
    # TP126 (IN0) - TP128 (SDA)
	# TP129 (SCL) - TP131 (IN1) - TP130 (AIN)
   # Sensor port 0:
    # TP135 (IN0) - TP137 (SDA)
	# TP138 (SCL) - TP140 (IN1) - TP139 (AIN)

 # Measurements required from manufacturer (e.g. external LEDs with comparators):
  # 3V3 output
   # TP109, TP118, TP127, TP136
  # 5V output
   # TP107, TP116, TP125, TP134

 # Test procedure in firmware, for each sensor port:
  # check LED output logical states (should be pulled to logical high)
  # check pullup resistors
   # read SDA, SCL lines, verify they are pulled high

  # testing with 3.3V VCCIO
   # set VCCIO 3.3V
   # configure SCL, SDA as input, IN0, IN1 as output
   # configure AIN as analog
   # drive IN0, IN1 to low, read logic low on SCL, SDA, verify voltage on AIN
   # drive IN0, IN1 to high, read logic high on SCL, SDA, verify voltage on AIN
   # configure SCL, SDA as output, IN0, IN1 as input
   # configure AIN as analog
   # drive SCL, SDA to low, read logic low on IN0, IN1, verify voltage on AIN
   # drive SCL, SDA to high, read logic high on IN0, IN1, verify voltage on AIN

  # testing with 5V VCCIO
   # set VCCIO 5V
   # configure SCL, SDA as input, IN0, IN1 as output
   # configure AIN as analog
   # drive IN0, IN1 to low, read logic low on SCL, SDA, verify voltage on AIN
   # drive IN0, IN1 to high, read logic high on SCL, SDA, verify voltage on AIN
   # configure SCL, SDA as output, IN0, IN1 as input
   # configure AIN as analog
   # drive SCL, SDA to low, read logic low on IN0, IN1, verify voltage on AIN
   # drive SCL, SDA to high, read logic high on IN0, IN1, verify voltage on AIN


Testing motor ports
-------------------

 # Preparation required:
  # connect encoder inputs to GPIOs using switchable connections
   # INT0 inputs (TP34, TP42, TP50, TP58, TP66, TP74) to TP105
   # INT1 inputs (TP38, TP46, TP54, TP62, TP70, TP78) to TP106
   # do NOT connect test points directly together (12 relays in total)
  # connect 10 Ohm resistor directly between test points: (simulate motor)
   # TP36 - TP40
   # TP44 - TP48
   # TP52 - TP56
   # TP60 - TP64
   # TP68 - TP72
   # TP76 - TP80

 # Measurements required from manufacturer:
  # 5V output
   # TP37, TP45, TP53, TP61, TP69, TP77

 # Test procedure in firmware:
  # check LED output logical states (should be pulled to logical high)
  # testing encoder inputs
   # check encoder inputs are pulled to logic high value
   # enable connections
   # drive TP105 to low, read INT0 inputs, verify logic low level
   # drive TP105 to high, read INT0 inputs, verify logic high level
   # drive TP106 to low, read INT1 inputs, verify logic low level
   # drive TP106 to high, read INT1 inputs, verify logic high level

  # testing motor pwm output
   # enable driver
   # set 100% ouptut in forward direction
   # measure current
   # assert that current is in expected range
   # set 0% output
   # assert that no current flows
   # set 100% ouptut in reverse direction
   # measure current
   # assert that current is in expected range
   # set 0% output
   # assert that no current flows

   # disable driver
   # set 100% ouptut in forward direction
   # measure current
   # assert that no current flows
   # set 0% output
   # assert that no current flows
   # set 100% ouptut in reverse direction
   # measure current
   # assert that no current flows
   # set 0% output
   # assert that no current flows


AUDIO!

Testing IMU
-----------

 # No action required from manufacturer

 # Test procedure in firmware:
  # read identifier register
  # assert correct ID is read
 # enable and evaluate accelerometer self test function using positive sign test
 # enable and evaluate accelerometer self test function using negative sign test
 # enable and evaluate gyroscope self test function using positive sign test
 # enable and evaluate gyroscope self test function using negative sign test

Test evaluation
---------------
 - ring and status LEDs
  - indicate different stages on different LEDs (6 motor, 4 sensor, imu, battery, RPi communication, [battery and motor] ADCs, test phase, <not used led>)

 - if any of the test steps fail, stop here
 - if every test is successful, flash bootloader supplied by Revolution Robotics and connect Raspberry Pi
